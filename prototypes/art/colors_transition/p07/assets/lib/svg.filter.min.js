import{Array as SVGArray,Container,Defs,Element,extend,find,namespaces as ns,nodeOrNew,utils,wrapWithAttrCheck}from"@svgdotjs/svg.js";export default class Filter extends Element{constructor(t){super(nodeOrNew("filter",t),t),this.$source="SourceGraphic",this.$sourceAlpha="SourceAlpha",this.$background="BackgroundImage",this.$backgroundAlpha="BackgroundAlpha",this.$fill="FillPaint",this.$stroke="StrokePaint",this.$autoSetIn=!0}put(t,e){return!(t=super.put(t,e)).attr("in")&&this.$autoSetIn&&t.attr("in",this.$source),t.attr("result")||t.attr("result",t.id()),t}remove(){return this.targets().each("unfilter"),super.remove()}targets(){return find('svg [filter*="'+this.id()+'"]')}toString(){return"url(#"+this.id()+")"}}class Effect extends Element{constructor(t){super(t,t),this.result(this.id())}in(t){if(null==t){const t=this.attr("in");return this.parent()&&this.parent().find(`[result="${t}"]`)[0]||t}return this.attr("in",t)}result(t){return this.attr("result",t)}toString(){return this.result()}}const getAttrSetter=t=>(function(...e){for(let r=t.length;r--;)null!=e[r]&&this.attr(t[r],e[r])}),updateFunctions={blend:getAttrSetter(["in","in2","mode"]),colorMatrix:getAttrSetter(["type","values"]),composite:getAttrSetter(["in","in2","operator"]),convolveMatrix:function(t){t=new SVGArray(t).toString(),this.attr({order:Math.sqrt(t.split(" ").length),kernelMatrix:t})},diffuseLighting:getAttrSetter(["surfaceScale","lightingColor","diffuseConstant","kernelUnitLength"]),displacementMap:getAttrSetter(["in","in2","scale","xChannelSelector","yChannelSelector"]),dropShadow:getAttrSetter(["in","dx","dy","stdDeviation"]),flood:getAttrSetter(["flood-color","flood-opacity"]),gaussianBlur:function(t=0,e=t){this.attr("stdDeviation",t+" "+e)},image:function(t){this.attr("href",t,ns.xlink)},morphology:getAttrSetter(["operator","radius"]),offset:getAttrSetter(["dx","dy"]),specularLighting:getAttrSetter(["surfaceScale","lightingColor","diffuseConstant","specularExponent","kernelUnitLength"]),tile:getAttrSetter([]),turbulence:getAttrSetter(["baseFrequency","numOctaves","seed","stitchTiles","type"])},filterNames=["blend","colorMatrix","componentTransfer","composite","convolveMatrix","diffuseLighting","displacementMap","dropShadow","flood","gaussianBlur","image","merge","morphology","offset","specularLighting","tile","turbulence"];filterNames.forEach(t=>{const e=utils.capitalize(t),r=updateFunctions[t];Filter[e+"Effect"]=class extends Effect{constructor(t){super(nodeOrNew("fe"+e,t),t)}update(t){return r.apply(this,t),this}},Filter.prototype[t]=wrapWithAttrCheck(function(t,...r){const n=new Filter[e+"Effect"];return null==t?this.put(n):("function"==typeof t?t.call(n,n):r.unshift(t),this.put(n).update(r))})}),extend(Filter,{merge(t){const e=this.put(new Filter.MergeEffect);return"function"==typeof t?(t.call(e,e),e):((t instanceof Array?t:[...arguments]).forEach(t=>{t instanceof Filter.MergeNode?e.put(t):e.mergeNode(t)}),e)},componentTransfer(t={}){const e=this.put(new Filter.ComponentTransferEffect);if("function"==typeof t)return t.call(e,e),e;if(!(t.r||t.g||t.b||t.a)){t={r:t,g:t,b:t,a:t}}for(let r in t)e.add(new(Filter["Func"+r.toUpperCase()])(t[r]));return e}});const filterChildNodes=["distantLight","pointLight","spotLight","mergeNode","FuncR","FuncG","FuncB","FuncA"];filterChildNodes.forEach(t=>{const e=utils.capitalize(t);Filter[e]=class extends Effect{constructor(t){super(nodeOrNew("fe"+e,t),t)}}});const componentFuncs=["funcR","funcG","funcB","funcA"];componentFuncs.forEach(function(t){const e=Filter[utils.capitalize(t)],r=wrapWithAttrCheck(function(){return this.put(new e)});Filter.ComponentTransferEffect.prototype[t]=r});const lights=["distantLight","pointLight","spotLight"];lights.forEach(t=>{const e=Filter[utils.capitalize(t)],r=wrapWithAttrCheck(function(){return this.put(new e)});Filter.DiffuseLightingEffect.prototype[t]=r,Filter.SpecularLightingEffect.prototype[t]=r}),extend(Filter.MergeEffect,{mergeNode(t){return this.put(new Filter.MergeNode).attr("in",t)}}),extend(Defs,{filter:function(t){var e=this.put(new Filter);return"function"==typeof t&&t.call(e,e),e}}),extend(Container,{filter:function(t){return this.defs().filter(t)}}),extend(Element,{filterWith:function(t){const e=t instanceof Filter?t:this.defs().filter(t);return this.attr("filter",e)},unfilter:function(t){return this.attr("filter",null)},filterer(){return this.reference("filter")}});var chainingEffects={blend:function(t,e){return this.parent()&&this.parent().blend(this,t,e)},colorMatrix:function(t,e){return this.parent()&&this.parent().colorMatrix(t,e).in(this)},componentTransfer:function(t){return this.parent()&&this.parent().componentTransfer(t).in(this)},composite:function(t,e){return this.parent()&&this.parent().composite(this,t,e)},convolveMatrix:function(t){return this.parent()&&this.parent().convolveMatrix(t).in(this)},diffuseLighting:function(t,e,r,n){return this.parent()&&this.parent().diffuseLighting(t,r,n).in(this)},displacementMap:function(t,e,r,n){return this.parent()&&this.parent().displacementMap(this,t,e,r,n)},dropShadow:function(t,e,r){return this.parent()&&this.parent().dropShadow(this,t,e,r).in(this)},flood:function(t,e){return this.parent()&&this.parent().flood(t,e)},gaussianBlur:function(t,e){return this.parent()&&this.parent().gaussianBlur(t,e).in(this)},image:function(t){return this.parent()&&this.parent().image(t)},merge:function(t){return t=t instanceof Array?t:[...t],this.parent()&&this.parent().merge(this,...t)},morphology:function(t,e){return this.parent()&&this.parent().morphology(t,e).in(this)},offset:function(t,e){return this.parent()&&this.parent().offset(t,e).in(this)},specularLighting:function(t,e,r,n,i){return this.parent()&&this.parent().specularLighting(t,r,n,i).in(this)},tile:function(){return this.parent()&&this.parent().tile().in(this)},turbulence:function(t,e,r,n,i){return this.parent()&&this.parent().turbulence(t,e,r,n,i).in(this)}};extend(Effect,chainingEffects),extend(Filter.MergeEffect,{in:function(t){return t instanceof Filter.MergeNode?this.add(t,0):this.add((new Filter.MergeNode).in(t),0),this}}),extend([Filter.CompositeEffect,Filter.BlendEffect,Filter.DisplacementMapEffect],{in2:function(t){if(null==t){const t=this.attr("in2");return this.parent()&&this.parent().find(`[result="${t}"]`)[0]||t}return this.attr("in2",t)}}),Filter.filter={sepiatone:[.343,.669,.119,0,0,.249,.626,.13,0,0,.172,.334,.111,0,0,0,0,0,1,0]};